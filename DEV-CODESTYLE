~~~ Code style ~~~
- based on K&R conventions
- indentation is based on TABs (standard width)
- line length: 80 characters
- comments: /* like this */
- do not leave trailing spaces on lines and lines in files
- all files are terminated with a \n


%%% Comments
/* single line comment (before code) */
foo();		/* short comment on a line with code */

/* some in-code comment that spreads multiple lines; please note that it matters
 * how you handle the beginning, continuation and ending of the comment
 */

/*
 * Proper big comment has first line empty.
 *
 * Then it continues normally.
 * And so is terminated.
 */


%%% If statements
if (var <= 64) {
	return 0;
} else if (var - vor >= 64 &&		/* operators at the end of a line */
	   var + vor <= 128) {
	return 0;
} else {
	return 1;
}


%%% Switch statement
/* between case blocks could be one empty line if they are big enough */
switch (var) {
	case 10:
		return 3;
		break;
	case 20:
		return 30;
		break;
	default:
		return 0;
		break;
}


%%% Header files
#ifndef FOO_H
#define FOO_H

#include <foolib.h>
#include "bar.h"

#define FOO	1
#define BAR	2

struct s_foo {
	int foo;
};

typedef struct s_foobar {
	int foo;
	char *bar;
} foobar_t;

typedef struct {
	int foo;
	char *bar;
} barfoo_t;

/* breaking lines only when longer than 80 characters or for special purposes */
extern foobar_t *foo_new(int faa, int fae,
			 char *bor, char *ber);

#endif /* FOO_H */
